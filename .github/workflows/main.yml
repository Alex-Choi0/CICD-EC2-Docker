name: CI/CD Docker

# 워크플로우를 트리거할 조건을 정의합니다.
# master 브랜치에 푸시될 때마다 이 워크플로우가 실행됩니다.
on:
  push:
    branches: [master]

jobs:
  build:
    # Job 이름 정의
    name: Build
    # 이 Job을 실행할 환경 설정
    runs-on: ubuntu-latest
    steps:
      # GitHub 리포지토리에서 코드를 체크아웃하는 단계
      - uses: actions/checkout@v2

      # Docker Buildx를 설정하는 단계
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Docker 빌드 레이어를 캐시하여 빌드 시간을 단축하는 단계
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 리포지토리 소유자 이름을 소문자로 변환하여 환경 변수에 저장하는 단계
      - name: Set lowercase repository owner
        run: echo "REPO_OWNER=$(echo $GITHUB_REPOSITORY_OWNER | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Docker 이미지를 저장할 경로를 환경 변수에 설정하는 단계
      - name: Set Docker image
        run: echo "DOCKER_IMAGE=alexchoi1/cicd-react" >> $GITHUB_ENV

      # Docker Hub에 로그인하는 단계
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지를 빌드하고 Docker Hub에 푸시하는 단계
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    # 이 Job이 'build' Job이 완료된 후에 실행되도록 설정
    needs: build
    # Job 이름 정의
    name: Deploy
    # 이 Job을 실행할 환경 설정 (self-hosted 러너와 특정 레이블 사용)
    runs-on: [self-hosted, label-go]
    steps:
      # Docker Hub에 로그인하는 단계
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지를 저장할 경로를 환경 변수에 설정하는 단계
      - name: Set Docker image
        run: echo "DOCKER_IMAGE=alexchoi1/cicd-react" >> $GITHUB_ENV

      # Docker Hub에서 이미지 pull
      - name: Pull Docker image
        run: sudo docker pull ${{ env.DOCKER_IMAGE }}:latest

      # 기존 Docker 컨테이너를 중지하고 삭제한 후, 새로운 이미지를 기반으로 컨테이너를 실행하는 단계
      - name: Docker run. Stop go_cicd
        run: docker stop go_cicd || true

      - name: Docker run. Remove go_cicd container
        run: docker rm go_cicd || true

      - name: Docker run. Remove image
        run: docker rmi ${{ env.DOCKER_IMAGE }}:latest || true

      - name: Docker run. Run go_cicd container
        run: docker run -d -p 3000:3000 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
